#include <stdio.h>

#define MAX_PARTITIONS 10

int partitions[MAX_PARTITIONS];

int num_partitions = 0;

void allocate_worst_fit(int process_size) {

    int worst_index = -1;

    int worst_size = -1;

    for (int i = 0; i < num_partitions; i++) {

        int free_size = partitions[i] - process_size;

        if (free_size >= 0 && free_size > worst_size) {

            worst_index = i;

            worst_size = free_size;

        }

    }

    if (worst_index >= 0) {

        printf("Allocated %d KB to process, leaving %d KB free in partition %d\n",

               process_size, partitions[worst_index] - process_size, worst_index+1);

        partitions[worst_index] = process_size;

    } else {

        printf("Cannot allocate %d KB to process (no suitable partition)\n", process_size);

    }

}

void print_partitions() {

    printf("Memory partitions:\n");

    for (int i = 0; i < num_partitions; i++) {

        printf("%d. %d KB\n", i+1, partitions[i]);

    }

}

int main() {

    partitions[num_partitions++] = 300;

    partitions[num_partitions++] = 600;

    partitions[num_partitions++] = 350;

    partitions[num_partitions++] = 200;

    partitions[num_partitions++] = 750;

    partitions[num_partitions++] = 125;

    print_partitions();

    allocate_worst_fit(115);

    allocate_worst_fit(500);

    allocate_worst_fit(358);

    allocate_worst_fit(200);

    allocate_worst_fit(375);

    print_partitions();

    return 0;

}
